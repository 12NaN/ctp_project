{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Luna23/Documents/CUNY Tech Prep/project/ctp_project/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Luna23/Documents/CUNY Tech Prep/project/ctp_project/src/components/MapComponent.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  width: \", \";\\n  height: \", \";\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\nconst Wrapper = styled.div(_templateObject(), props => props.width, props => props.height);\nconst user = {\n  locationLatitude: 40.770510,\n  locationLongitude: -73.965242\n};\nconst customIcon = L.icon({\n  iconUrl: '../assets/sunset.jpg',\n  iconSize: [38, 95],\n  iconAnchor: [22, 94],\n  popUpAnchor: [-3, -76]\n});\nexport default class MapComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: {\n        latitude: 40.760610,\n        longitude: -73.935242\n      },\n      haveUsersLocation: false,\n      zoom: 2\n    };\n  } //Asks for users location when map renders, then places a pin based on the position\n  //coordinates\n\n\n  componentDidMount() {\n    //browser method grabs user location coordinates with permission\n    navigator.geolocation.getCurrentPosition(position => {\n      this.setState({\n        location: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        },\n        haveUsersLocation: true,\n        zoom: 13\n      });\n    }, //if above method fails we use the api call below to find user's location\n    () => {\n      console.log(\"Did not receive location\");\n      fetch('https://ipapi.co/json').then(res => res.json()).then(location => {\n        console.log(location);\n        this.setState({\n          location: {\n            lat: location.latitude,\n            lng: location.longitude\n          },\n          haveUsersLocation: true,\n          zoom: 13\n        });\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Wrapper, {\n      width: \"100%\",\n      height: \"520px\",\n      id: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Luna23/Documents/CUNY Tech Prep/project/ctp_project/src/components/MapComponent.js"],"names":["React","L","styled","Wrapper","div","props","width","height","user","locationLatitude","locationLongitude","customIcon","icon","iconUrl","iconSize","iconAnchor","popUpAnchor","MapComponent","Component","constructor","state","location","latitude","longitude","haveUsersLocation","zoom","componentDidMount","navigator","geolocation","getCurrentPosition","position","setState","lat","coords","lng","console","log","fetch","then","res","json","render"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,0BAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,OAAO,GAAGD,MAAM,CAACE,GAAV,oBACFC,KAAK,IAAIA,KAAK,CAACC,KADb,EAEDD,KAAK,IAAIA,KAAK,CAACE,MAFd,CAAb;AAKA,MAAMC,IAAI,GAAG;AACTC,EAAAA,gBAAgB,EAAE,SADT;AAETC,EAAAA,iBAAiB,EAAE,CAAC;AAFX,CAAb;AAKA,MAAMC,UAAU,GAAGV,CAAC,CAACW,IAAF,CAAO;AACtBC,EAAAA,OAAO,EAAE,sBADa;AAEtBC,EAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CAFY;AAGtBC,EAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,CAHU;AAItBC,EAAAA,WAAW,EAAE,CAAC,CAAC,CAAF,EAAK,CAAC,EAAN;AAJS,CAAP,CAAnB;AAOA,eAAe,MAAMC,YAAN,SAA2BjB,KAAK,CAACkB,SAAjC,CAA2C;AAExDC,EAAAA,WAAW,CAACd,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKe,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE,SADF;AAERC,QAAAA,SAAS,EAAE,CAAC;AAFJ,OADC;AAKXC,MAAAA,iBAAiB,EAAE,KALR;AAMXC,MAAAA,IAAI,EAAE;AANK,KAAb;AASD,GAbuD,CAetD;AACA;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB;AACAC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AAErD,WAAKC,QAAL,CAAc;AACZV,QAAAA,QAAQ,EAAE;AACRW,UAAAA,GAAG,EAAEF,QAAQ,CAACG,MAAT,CAAgBX,QADb;AAERY,UAAAA,GAAG,EAAEJ,QAAQ,CAACG,MAAT,CAAgBV;AAFb,SADE;AAKVC,QAAAA,iBAAiB,EAAE,IALT;AAMVC,QAAAA,IAAI,EAAE;AANI,OAAd;AASD,KAXD,EAYA;AACA,UAAM;AACJU,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAC,MAAAA,KAAK,CAAC,uBAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQjB,QAAQ,IAAI;AAChBc,QAAAA,OAAO,CAACC,GAAR,CAAYf,QAAZ;AAEA,aAAKU,QAAL,CAAc;AACZV,UAAAA,QAAQ,EAAE;AACRW,YAAAA,GAAG,EAAEX,QAAQ,CAACC,QADN;AAERY,YAAAA,GAAG,EAAEb,QAAQ,CAACE;AAFN,WADE;AAKVC,UAAAA,iBAAiB,EAAE,IALT;AAMVC,UAAAA,IAAI,EAAE;AANI,SAAd;AAQD,OAbH;AAcD,KA7BD;AA8BD;;AAEHgB,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAC,MAAf;AAAsB,MAAA,MAAM,EAAC,OAA7B;AAAqC,MAAA,EAAE,EAAC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AArDuD","sourcesContent":["import React from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  width: ${props => props.width};\n  height: ${props => props.height};\n`;\n\nconst user = {\n    locationLatitude: 40.770510,\n    locationLongitude: -73.965242\n  };\n\nconst customIcon = L.icon({\n    iconUrl: '../assets/sunset.jpg',\n    iconSize: [38, 95],\n    iconAnchor: [22, 94],\n    popUpAnchor: [-3, -76]\n  });\n\nexport default class MapComponent extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      location: {\n        latitude: 40.760610,\n        longitude: -73.935242,\n      },\n      haveUsersLocation: false,\n      zoom: 2\n\n    }\n  }\n\n    //Asks for users location when map renders, then places a pin based on the position\n    //coordinates\n    componentDidMount() {\n      //browser method grabs user location coordinates with permission\n      navigator.geolocation.getCurrentPosition((position) => {\n        \n        this.setState({\n          location: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n            haveUsersLocation: true,\n            zoom: 13\n        });\n\n      }, \n      //if above method fails we use the api call below to find user's location\n      () => {\n        console.log(\"Did not receive location\");\n        fetch('https://ipapi.co/json')\n          .then(res => res.json())\n          .then(location => {\n            console.log(location);\n\n            this.setState({\n              location: {\n                lat: location.latitude,\n                lng: location.longitude\n              },\n                haveUsersLocation: true,\n                zoom: 13\n            });\n          });\n      });\n    }\n\n  render() {\n    return <Wrapper width=\"100%\" height=\"520px\" id=\"map\" />\n  }\n}"]},"metadata":{},"sourceType":"module"}