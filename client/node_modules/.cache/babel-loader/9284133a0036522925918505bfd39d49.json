{"ast":null,"code":"import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction handleInput(event) {\n  const _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToRoom(id = '5ceb004b-37bb-4c5f-8428-736df7233003') {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoom({\n    roomId: `${id}`,\n    messageLimit: 100,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n      },\n      onPresenceChanged: () => {\n        const currentRoom = this.state.currentRoom;\n        this.setState({\n          roomUsers: currentRoom.users.sort(a => {\n            if (a.presence.state === 'online') return -1;\n            return 1;\n          })\n        });\n      }\n    }\n  }).then(currentRoom => {\n    const roomName = currentRoom.customData && currentRoom.customData.isDirectMessage ? currentRoom.customData.userIds.filter(id => id !== currentUser.id)[0] : currentRoom.name;\n    this.setState({\n      currentRoom,\n      roomUsers: currentRoom.users,\n      rooms: currentUser.rooms,\n      roomName\n    });\n  }).catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  axios.post('http://localhost:5200/users', {\n    userId\n  }).then(() => {\n    const tokenProvider = new Chatkit.TokenProvider({\n      url: 'http://localhost:5200/authenticate'\n    });\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:9db2c116-efd4-4485-b761-66bb1d1d157e',\n      userId,\n      tokenProvider\n    });\n    return chatManager.connect({\n      onAddedToRoom: room => {\n        const rooms = this.state.rooms;\n        this.setState({\n          rooms: [...rooms, room]\n        });\n      }\n    }).then(currentUser => {\n      this.setState({\n        currentUser,\n        showLogin: false,\n        rooms: currentUser.rooms\n      }, () => connectToRoom.call(this));\n    });\n  }).catch(console.error);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const _this$state = this.state,\n        newMessage = _this$state.newMessage,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  if (newMessage.trim() === '') return;\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: `${currentRoom.id}`\n  });\n  this.setState({\n    newMessage: ''\n  });\n}\n\nfunction createPrivateRoom(id) {\n  const _this$state2 = this.state,\n        currentUser = _this$state2.currentUser,\n        rooms = _this$state2.rooms;\n  const roomName = `${currentUser.id}_${id}`;\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const userIds = room.customData.userIds;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: `${roomName}`,\n    private: true,\n    addUserIds: [`${id}`],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id]\n    }\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nexport { handleInput, connectToRoom, connectToChatkit, sendMessage, sendDM };","map":{"version":3,"sources":["/Users/Luna23/Documents/CUNY Tech Prep/master-project/ctp_project/client/src/methods.js"],"names":["Chatkit","axios","handleInput","event","target","value","name","setState","connectToRoom","id","currentUser","state","messages","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","onPresenceChanged","currentRoom","roomUsers","users","sort","a","presence","then","roomName","customData","isDirectMessage","userIds","filter","rooms","catch","console","error","connectToChatkit","preventDefault","userId","trim","alert","post","tokenProvider","TokenProvider","url","chatManager","ChatManager","instanceLocator","connect","onAddedToRoom","room","showLogin","call","sendMessage","newMessage","text","createPrivateRoom","isPrivateChatCreated","arr","join","length","Promise","resolve","createRoom","private","addUserIds","sendDM"],"mappings":"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","sourcesContent":["import Chatkit from '@pusher/chatkit-client';\r\nimport axios from 'axios';\r\n\r\nfunction handleInput(event) {\r\n    const { value, name } = event.target;\r\n\r\n    this.setState({\r\n        [name]: value,\r\n    });\r\n}\r\n\r\nfunction connectToRoom(id = '5ceb004b-37bb-4c5f-8428-736df7233003') {\r\n    const { currentUser } = this.state;\r\n\r\n    this.setState({\r\n        messages: [],\r\n    });\r\n\r\n    return currentUser\r\n        .subscribeToRoom({\r\n            roomId: `${id}`,\r\n            messageLimit: 100,\r\n            hooks: {\r\n                onMessage: message => {\r\n                    this.setState({\r\n                        messages: [...this.state.messages, message],\r\n                    });\r\n                },\r\n                onPresenceChanged: () => {\r\n                    const { currentRoom } = this.state;\r\n                    this.setState({\r\n                        roomUsers: currentRoom.users.sort(a => {\r\n                            if (a.presence.state === 'online') return -1;\r\n\r\n                            return 1;\r\n                        }),\r\n                    });\r\n                },\r\n            },\r\n        })\r\n        .then(currentRoom => {\r\n            const roomName =\r\n                currentRoom.customData && currentRoom.customData.isDirectMessage\r\n                    ? currentRoom.customData.userIds.filter(\r\n                        id => id !== currentUser.id\r\n                    )[0]\r\n                    : currentRoom.name;\r\n\r\n            this.setState({\r\n                currentRoom,\r\n                roomUsers: currentRoom.users,\r\n                rooms: currentUser.rooms,\r\n                roomName,\r\n            });\r\n        })\r\n        .catch(console.error);\r\n}\r\n\r\nfunction connectToChatkit(event) {\r\n    event.preventDefault();\r\n\r\n    const { userId } = this.state;\r\n\r\n    if (userId === null || userId.trim() === '') {\r\n        alert('Invalid userId');\r\n        return;\r\n    }\r\n\r\n    axios\r\n        .post('http://localhost:5200/users', { userId })\r\n        .then(() => {\r\n            const tokenProvider = new Chatkit.TokenProvider({\r\n                url: 'http://localhost:5200/authenticate',\r\n            });\r\n\r\n            const chatManager = new Chatkit.ChatManager({\r\n                instanceLocator: 'v1:us1:9db2c116-efd4-4485-b761-66bb1d1d157e',\r\n                userId,\r\n                tokenProvider,\r\n            });\r\n\r\n            return chatManager\r\n                .connect({\r\n                    onAddedToRoom: room => {\r\n                        const { rooms } = this.state;\r\n                        this.setState({\r\n                            rooms: [...rooms, room],\r\n                        });\r\n                    },\r\n                })\r\n                .then(currentUser => {\r\n                    this.setState(\r\n                        {\r\n                            currentUser,\r\n                            showLogin: false,\r\n                            rooms: currentUser.rooms,\r\n                        },\r\n                        () => connectToRoom.call(this)\r\n                    );\r\n                });\r\n        })\r\n        .catch(console.error);\r\n}\r\n\r\nfunction sendMessage(event) {\r\n    event.preventDefault();\r\n    const { newMessage, currentUser, currentRoom } = this.state;\r\n\r\n    if (newMessage.trim() === '') return;\r\n\r\n    currentUser.sendMessage({\r\n        text: newMessage,\r\n        roomId: `${currentRoom.id}`,\r\n    });\r\n\r\n    this.setState({\r\n        newMessage: '',\r\n    });\r\n}\r\n\r\nfunction createPrivateRoom(id) {\r\n    const { currentUser, rooms } = this.state;\r\n    const roomName = `${currentUser.id}_${id}`;\r\n\r\n    const isPrivateChatCreated = rooms.filter(room => {\r\n        if (room.customData && room.customData.isDirectMessage) {\r\n            const arr = [currentUser.id, id];\r\n            const { userIds } = room.customData;\r\n\r\n            if (arr.sort().join('') === userIds.sort().join('')) {\r\n                return {\r\n                    room,\r\n                };\r\n            }\r\n        }\r\n\r\n        return false;\r\n    });\r\n\r\n    if (isPrivateChatCreated.length > 0) {\r\n        return Promise.resolve(isPrivateChatCreated[0]);\r\n    }\r\n\r\n    return currentUser.createRoom({\r\n        name: `${roomName}`,\r\n        private: true,\r\n        addUserIds: [`${id}`],\r\n        customData: {\r\n            isDirectMessage: true,\r\n            userIds: [currentUser.id, id],\r\n        },\r\n    });\r\n}\r\n\r\nfunction sendDM(id) {\r\n    createPrivateRoom.call(this, id).then(room => {\r\n        connectToRoom.call(this, room.id);\r\n    });\r\n}\r\n\r\nexport { handleInput, connectToRoom, connectToChatkit, sendMessage, sendDM }"]},"metadata":{},"sourceType":"module"}